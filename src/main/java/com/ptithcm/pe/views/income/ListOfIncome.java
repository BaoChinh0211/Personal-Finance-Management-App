/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ptithcm.pe.views.income;

import com.ptithcm.pe.views.income.*;
import com.ptithcm.pe.PersonalFinanceManagement;
import com.ptithcm.pe.dao.CategoryDAO;
import com.ptithcm.pe.dao.FinancialDAO;
import com.ptithcm.pe.models.Category;
import com.ptithcm.pe.models.Financial;
import com.ptithcm.pe.utilities.Constraints;
import com.ptithcm.pe.utilities.cell.TableActionCellEditor;
import com.ptithcm.pe.utilities.cell.TableActionCellRender;
import com.ptithcm.pe.utilities.cell.TableActionEvent;
import com.ptithcm.pe.utilities.search.SearchOptinEvent;
import com.ptithcm.pe.utilities.search.SearchOption;
import java.awt.ComponentOrientation;

import java.awt.Frame;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tezca
 */
public class ListOfIncome extends javax.swing.JPanel {

    ArrayList<Financial> financials = new ArrayList<Financial>();

    /**
     * Creates new form ListExpenditurePanel
     */
    public ListOfIncome() {
        initComponents();
        loadData();
        initTable();
        initSearch();
        showDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchOption1 = new com.ptithcm.pe.utilities.search.SearchOption();
        jLabel1 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        btnInsert = new javax.swing.JButton();
        txtSearch = new com.ptithcm.pe.utilities.search.TextFieldSearchOption();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lbCategory = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        lbAmount = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        lbDate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        lbNote = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNote = new javax.swing.JTextArea();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 750));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(com.ptithcm.pe.utilities.Constraints.TITLE_LIST_OF_INCOMES);

        btnInsert.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnInsert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icon_add20.png"))); // NOI18N
        btnInsert.setText("Thêm");
        btnInsert.setPreferredSize(new java.awt.Dimension(135, 35));
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Phân loại", "Số tiền", "Thời gian", "Ghi chú", "Hành động"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(40);
        table.setSelectionBackground(new java.awt.Color(94, 218, 167));
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(3).setPreferredWidth(250);
        }

        lbCategory.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbCategory.setText("Phân loại:");
        lbCategory.setPreferredSize(new java.awt.Dimension(75, 35));

        txtCategory.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txtCategory.setPreferredSize(new java.awt.Dimension(300, 35));

        lbAmount.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbAmount.setText("Số tiền:");
        lbAmount.setPreferredSize(new java.awt.Dimension(75, 35));

        txtAmount.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txtAmount.setPreferredSize(new java.awt.Dimension(300, 35));

        lbDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbDate.setText("Ngày tháng:");
        lbDate.setPreferredSize(new java.awt.Dimension(75, 35));

        txtDate.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txtDate.setPreferredSize(new java.awt.Dimension(300, 35));

        lbNote.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        lbNote.setText("Ghi chú:");
        lbNote.setPreferredSize(new java.awt.Dimension(75, 35));

        txtNote.setColumns(20);
        txtNote.setRows(5);
        txtNote.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtNote);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbNote, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(74, 74, 74))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        AddEditAnIncome panel = new AddEditAnIncome((Frame) SwingUtilities.getWindowAncestor(this), true, ListOfIncome.this, true);
        panel.setSize(800, 500);
        panel.setTitle(Constraints.TITLE_ADD_AN_EXPENSE);
        panel.lblTitle.setText(Constraints.TITLE_ADD_AN_INCOME);
        panel.setSize(800, 550);
        panel.setLocationRelativeTo(null);
        panel.setVisible(true);
    }//GEN-LAST:event_btnInsertActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (txtSearch.isSelected()) {
            ArrayList<Financial> searchFinancials = new ArrayList<>();
            int userId = PersonalFinanceManagement.getInstance().getUserId();
            int option = txtSearch.getSelectedIndex();
            String text = "%" + txtSearch.getText().trim() + "%";
            if (option == 0) {
                String where = "WHERE CategoryId IN (SELECT CategoryId FROM Category c WHERE c.UserId = ? AND CategoryName LIKE ? AND CategoryType = 0)";
                searchFinancials = FinancialDAO.getInstance().searchByCondidion(where, userId, text);
            } else if (option == 1) {
                String where = "WHERE Amount LIKE ? AND CategoryId IN (SELECT CategoryId FROM Category c WHERE c.UserId = ? AND CategoryType = 0)";
                searchFinancials = FinancialDAO.getInstance().searchByCondidion(where, text, userId);
            } else if (option == 2) {
                String where = "WHERE [DateTime] LIKE ? AND CategoryId IN (SELECT CategoryId FROM Category c WHERE c.UserId = ? AND CategoryType = 0)";
                searchFinancials = FinancialDAO.getInstance().searchByCondidion(where, text, userId);
            } else if (option == 3) {
                String where = "WHERE Note LIKE ? AND CategoryId IN (SELECT CategoryId FROM Category c WHERE c.UserId = ? AND CategoryType = 0)";
                searchFinancials = FinancialDAO.getInstance().searchByCondidion(where, text, userId);
            }
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            for (Financial financial : searchFinancials) {
                int CategoryId = financial.getCategoryId();
                Category category = CategoryDAO.getInstance().selectById(CategoryId);
                model.addRow(new Object[]{category.getCategoryName(), financial.getAmount(), financial.getDateTime(), financial.getNote()});
            }
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    public void loadData() {
        this.financials = FinancialDAO.getInstance().selectByCategory(false);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        for (Financial financial : financials) {
            int CategoryId = financial.getCategoryId();
            Category category = CategoryDAO.getInstance().selectById(CategoryId);
            model.addRow(new Object[]{category.getCategoryName(), financial.getAmount(), financial.getDateTime(), financial.getNote()});
        }
    }

    private void initTable() {
        // Xử lý sự kiện nút Edit và Delete
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                if (row != -1) {
                    Financial financial = financials.get(row);
                    Category category = CategoryDAO.getInstance().selectById(financial.getCategoryId());
                    AddEditAnIncome panel = new AddEditAnIncome((Frame) SwingUtilities.getWindowAncestor(ListOfIncome.this), true, ListOfIncome.this, financial, false);
                    panel.setTitle(Constraints.TITLE_UPDATE_AN_INCOME);
                    panel.lblTitle.setText(Constraints.TITLE_UPDATE_AN_INCOME);

                    // Set phân loại của cbbCategory
                    for (int i = 0; i < panel.cbbCategory.getItemCount(); i++) {
                        String name = category.getCategoryName();
                        String value = panel.cbbCategory.getItemAt(i);
                        if (value.equals(name)) {
                            panel.cbbCategory.setSelectedIndex(i);
                            break;
                        }
                    }
                    // Chuyển Timestamp thành đối tượng Date
                    Date date = new Date(financial.getDateTime().getTime());

                    // Định dạng lại ngày để hiển thị lên JDateChooser
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                    String dateStr = dateFormat.format(date);
                    try {
                        panel.dcrDate.setDate(dateFormat.parse(dateStr));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    // Định dạng lại giờ để hiển thị lên JSpinner
                    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");
                    String timeStr = timeFormat.format(date);
                    try {
                        panel.spinTime.setValue(timeFormat.parse(timeStr));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    panel.txtNote.setText(financial.getNote());
                    panel.txtAmount.setText(String.valueOf(financial.getAmount()));

                    panel.setSize(800, 550);
                    panel.setLocationRelativeTo(null);
                    panel.setVisible(true);
                }
            }

            @Override
            public void onDelete(int row) {
                if (table.isEditing()) {
                    table.getCellEditor().stopCellEditing();
                }
                if (JOptionPane.showConfirmDialog(ListOfIncome.this, Constraints.FINANCIAL_CONFIRM_DELETE_AN_INCOME, Constraints.LABEL_CONFIRM, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    int result = FinancialDAO.getInstance().delete(financials.get(row));
                    if (result > 0) {
                        JOptionPane.showMessageDialog(ListOfIncome.this, Constraints.FINANCIAL_DELETE_INCOME_SUCCESS, Constraints.LABEL_INFORMATION, JOptionPane.INFORMATION_MESSAGE);
                        DefaultTableModel tblModel = (DefaultTableModel) table.getModel();
                        tblModel.removeRow(row);
                        loadData();
                    } else {
                        JOptionPane.showMessageDialog(ListOfIncome.this, Constraints.FINANCIAL_DELETE_INCOME_FAIL, Constraints.LABEL_ERROR, JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

        };
        table.getColumnModel().getColumn(4).setCellRenderer(new TableActionCellRender());
        table.getColumnModel().getColumn(4).setCellEditor(new TableActionCellEditor(event));
    }

    private void initSearch() {
        txtSearch.addEventOptionSelected(new SearchOptinEvent() {
            @Override
            public void optionSelected(SearchOption option, int index) {
                txtSearch.setHint("Tìm kiếm theo " + option.getName() + "...");
            }

        });
        txtSearch.addOption(new SearchOption("Phân loại", new ImageIcon(getClass().getResource("/icons/icon_category20.png"))));
        txtSearch.addOption(new SearchOption("Số tiền", new ImageIcon(getClass().getResource("/icons/icon_amount20.png"))));
        txtSearch.addOption(new SearchOption("Thời gian", new ImageIcon(getClass().getResource("/icons/icon_time20.png"))));
        txtSearch.addOption(new SearchOption("Ghi chú", new ImageIcon(getClass().getResource("/icons/icon_note20.png"))));
        txtSearch.setSelectedIndex(0);
    }

    private void showDetails() {
        ListSelectionModel selectionModel = table.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Xử lý sự kiện khi người dùng chọn một hàng trong JTable
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = table.getSelectedRow();
                    if (selectedRow != -1) {
                        // Lấy dữ liệu từ hàng được chọn và hiển thị nó trong các TextField
                        Object category = table.getValueAt(selectedRow, 0);
                        Object amount = table.getValueAt(selectedRow, 1);
                        Object time = table.getValueAt(selectedRow, 2);
                        Object note = table.getValueAt(selectedRow, 3);

                        txtCategory.setText(category.toString());
                        txtAmount.setText(amount.toString());
                        txtDate.setText(time.toString());
                        txtNote.setText(note.toString());
                    }
                }
            }
        });
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInsert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lbAmount;
    private javax.swing.JLabel lbCategory;
    private javax.swing.JLabel lbDate;
    private javax.swing.JLabel lbNote;
    private com.ptithcm.pe.utilities.search.SearchOption searchOption1;
    private javax.swing.JTable table;
    public javax.swing.JTextField txtAmount;
    public javax.swing.JTextField txtCategory;
    public javax.swing.JTextField txtDate;
    public javax.swing.JTextArea txtNote;
    private com.ptithcm.pe.utilities.search.TextFieldSearchOption txtSearch;
    // End of variables declaration//GEN-END:variables
}
