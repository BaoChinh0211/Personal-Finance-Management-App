/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ptithcm.pe.UI.expenditure;

//import com.ptithcm.pe.UI.Dialogs.AddNewRevenuesTypeE;

import com.ptithcm.pe.PersonalFinanceManagement;
import com.ptithcm.pe.dao.GroupDAO;
import com.ptithcm.pe.dao.RevenuesDAO;
import com.ptithcm.pe.database.DatabaseHelper;
import com.ptithcm.pe.model.Group;
import com.ptithcm.pe.model.Revenues;
import com.ptithcm.pe.utilities.Constraints;
import com.ptithcm.pe.utilities.TabbedPaneUtilities;
import com.ptithcm.pe.utilities.cell.CustomTableHeader;
import com.ptithcm.pe.utilities.cell.TableActionCellEditor;
import com.ptithcm.pe.utilities.cell.TableActionCellRender;
import com.ptithcm.pe.utilities.cell.TableActionEvent;
import com.ptithcm.pe.utilities.search.SearchOptinEvent;
import com.ptithcm.pe.utilities.search.SearchOption;

import java.awt.Frame;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;

/**
 * @author tezca
 */
public class ListGroupTypeEPanel extends javax.swing.JPanel {

    ArrayList<Group> groups = new ArrayList<Group>();

    /**
     * Creates new form ListExpenditureTypePanel
     */
    public ListGroupTypeEPanel() {
        initComponents();
        loadData();
        initTable();
        initSearch();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtSearch = new com.ptithcm.pe.utilities.search.TextFieldSearchOption();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        setPreferredSize(new java.awt.Dimension(1200, 900));

        lblTitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 0, 204));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText(Constraints.TITLE_LIST_EXPENDITURE_TYPE);
        lblTitle.setPreferredSize(new java.awt.Dimension(788, 60));

        jSeparator1.setPreferredSize(new java.awt.Dimension(788, 10));

        txtSearch.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtSearch.setPreferredSize(new java.awt.Dimension(350, 34));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        table.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "Danh mục", "Hành động"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                    false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        table.setPreferredSize(new java.awt.Dimension(400, 300));
        table.setRowHeight(40);
        table.setSelectionBackground(new java.awt.Color(57, 137, 111));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(1).setPreferredWidth(75);
        }

        lblName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblName.setText("Tên");
        lblName.setPreferredSize(new java.awt.Dimension(40, 35));

        txtName.setEditable(false);
        txtName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtName.setPreferredSize(new java.awt.Dimension(250, 35));

        btnAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icon_add20.png"))); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.setPreferredSize(new java.awt.Dimension(100, 35));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icon_refresh20.png"))); // NOI18N
        btnRefresh.setText("Làm mới");
        btnRefresh.setPreferredSize(new java.awt.Dimension(100, 35));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(186, 186, 186)
                                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(77, 77, 77)
                                                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(77, 77, 77))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(220, 220, 220)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(289, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (txtSearch.isSelected()) {
            int option = txtSearch.getSelectedIndex();
            String text = "%" + txtSearch.getText().trim() + "%";
            if (option == 0) {
//                loadData2("WHERE [Type] = 1 AND [UserId] = 1 AND [Name] LIKE ?", text);
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0);
                ArrayList<Group> groups = GroupDAO.getInstance().searchByName(true, text);
                for (Group group1 : groups) {
                    model.addRow(new Object[]{group1.getGroupName()});
                }
//            }
            }
        }
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        AddNewGroupTypeExp add = new AddNewGroupTypeExp((Frame) SwingUtilities.getWindowAncestor(this), true, this);
        add.setSize(435, 250);
        add.setLocationRelativeTo(null);
        add.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadData();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int selectedRow = table.getSelectedRow();
        displayData(selectedRow);

    }//GEN-LAST:event_tableMouseClicked

    private void initTable() {
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onEdit(int row) {
                if (row != -1) {
                    Group group = groups.get(row);
                    UpdateGroupTypeExp panel = new UpdateGroupTypeExp((Frame) SwingUtilities.getWindowAncestor(ListGroupTypeEPanel.this), true, ListGroupTypeEPanel.this, group);
                    panel.setSize(435, 250);
                    panel.setLocationRelativeTo(null);
                    panel.setVisible(true);
                }
            }

            @Override
            public void onDelete(int row) {
                if (row != -1) {
                    if (JOptionPane.showConfirmDialog(ListGroupTypeEPanel.this, Constraints.DELETE_GROUP_CONFIRM, Constraints.CONFIRM_DELETE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                       /* for (Group group1: groups
                             ) {
                            System.out.println(group1.toString());
                        }*/
                        int result = GroupDAO.getInstance().delete(groups.get(row));
                        groups.remove(row);
                        /*for (Group group2: groups
                        ) {
                            System.out.println(group2.toString());
                        }*/
                        if (result > 0) {
                            JOptionPane.showMessageDialog(ListGroupTypeEPanel.this, Constraints.DELETE_GROUP_SUCCESS, Constraints.NOTIFY, JOptionPane.INFORMATION_MESSAGE);
                            loadData();
                        } else {
                            JOptionPane.showMessageDialog(ListGroupTypeEPanel.this, Constraints.DELETE_GROUP_FAILD, Constraints.ERROR, JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }

        };
        table.getColumnModel().getColumn(1).setCellRenderer(new TableActionCellRender());
        table.getColumnModel().getColumn(1).setCellEditor(new TableActionCellEditor(event));
        // Tạo một đối tượng DefaultTableCellRenderer để căn giữa tiêu đề
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        table.getColumnModel().getColumn(0).setHeaderRenderer(centerRenderer);
        table.getColumnModel().getColumn(1).setHeaderRenderer(centerRenderer);
        // Thêm ListSelectionListener vào JTable
        ListSelectionModel selectionModel = table.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = table.getSelectedRow();
                    if (selectedRow != -1) {
                        // Lấy dữ liệu từ các cột của dòng được chọn
                        Object dataColumn1 = table.getValueAt(selectedRow, 0);

                        // Hiển thị dữ liệu trong các JTextField
                        txtName.setText(dataColumn1.toString());

                    }
                }
            }
        });
    }

    public void loadData() {
        this.groups = GroupDAO.getInstance().selectbyType(true);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        for (Group group1 : groups) {
            model.addRow(new Object[]{group1.getGroupName()});
        }
    }

    private void initSearch() {
        txtSearch.addOption(new SearchOption("Danh mục", new ImageIcon(getClass().getResource("/icons/icon_list20.png"))));
        txtSearch.setHint("Tìm kiếm danh mục...");
        txtSearch.setSelectedIndex(0);
    }

    private void displayData(int i) {
        Group group = groups.get(i);
        txtName.setText(group.getGroupName());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable table;
    public javax.swing.JTextField txtName;
    private com.ptithcm.pe.utilities.search.TextFieldSearchOption txtSearch;
    // End of variables declaration//GEN-END:variables

}
